generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email               String     @unique(map: "User_email_key")
  password            String
  name                String
  plan                String     @default("free")
  role                String?
  id                  String     @id @default(cuid())
  workspaceName       String?    @map("workspace_name")
  onboardingCompleted Boolean    @default(false) @map("onboarding_completed")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  teamId              String?
  inviteToken         String?    @map("invite_token")
  inviteTokenExpiry   DateTime?  @map("invite_token_expiry")
  brandKit            BrandKit?
  userUsage           UserUsage?
  team                Team?      @relation(fields: [teamId], references: [id])

  @@map("users")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  brandKit    BrandKit?
  invoices    Invoice[]
  permissions Permission[]
  projects    Project[]
  usage       TeamUsage?
  templates   Template[]
  videos      Video[]
  invitations Invitation[]
  members     User[]
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  teamId    String
  token     String   @unique
  role      String
  message   String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  accepted  Boolean  @default(false)
  team      Team     @relation(fields: [teamId], references: [id])

  @@map("invitations")
}

model TeamUsage {
  id              String   @id @default(uuid())
  teamId          String   @unique
  videosThisMonth Int
  quota           Int
  activeUsers     Int
  updatedAt       DateTime @updatedAt
  team            Team     @relation(fields: [teamId], references: [id])
}

model BrandKit {
  id     String   @id @default(uuid())
  teamId String?  @unique
  logo   String?
  fonts  String[]
  colors String[]
  audio  String[]
  images String[]
  userId String?  @unique
  team   Team?    @relation(fields: [teamId], references: [id])
  user   User?    @relation(fields: [userId], references: [id])
}

model UserUsage {
  id              String   @id @default(uuid())
  userId          String   @unique
  videosThisMonth Int
  quota           Int
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Project {
  id     String   @id @default(uuid())
  name   String
  user   String
  date   DateTime
  teamId String
  team   Team     @relation(fields: [teamId], references: [id])
}

model Video {
  id      String   @id @default(uuid())
  title   String
  creator String
  date    DateTime
  status  String
  teamId  String
  team    Team     @relation(fields: [teamId], references: [id])
}

model Template {
  id     String @id @default(uuid())
  name   String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
}

model Invoice {
  id     String   @id @default(uuid())
  date   DateTime
  amount Float
  status String
  teamId String
  team   Team     @relation(fields: [teamId], references: [id])
}

model Permission {
  id      String  @id @default(uuid())
  role    String
  view    Boolean
  edit    Boolean
  delete  Boolean
  billing Boolean
  teamId  String
  team    Team    @relation(fields: [teamId], references: [id])
}
